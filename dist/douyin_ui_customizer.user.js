// ==UserScript==
// @name         douyin-ui-customizer
// @namespace    https://github.com/SutChan/douyin_tool
// @version      1.0.20
// @description  抖音Web端界面UI定制工具
// @author       SutChan
// @match        https://www.douyin.com/*
// @match        https://*.douyin.com/*
// @icon         https://www.douyin.com/favicon.ico
// @grant        GM_addStyle
// @grant        GM_getValue
// @grant        GM_setValue
// @grant        GM_registerMenuCommand
// @grant        GM_xmlhttpRequest
// @updateURL    https://github.com/SutChan/douyin_tool/raw/main/dist/douyin_ui_customizer.user.js
// @downloadURL  https://github.com/SutChan/douyin_tool/raw/main/dist/douyin_ui_customizer.user.js
// @license      MIT
// ==/UserScript==
/* eslint-disable */
// @ts-nocheck

 const defaultStyles = ` .douyin-ui-customizer-panel { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 90%; max-width: 800px; max-height: 90vh; background: #ffffff; border-radius: 12px; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2); z-index: 999999; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; display: flex; flex-direction: column; overflow: hidden; } .douyin-ui-customizer-panel .panel-header { padding: 20px; background: #000000; color: #ffffff; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #e0e0e0; } .douyin-ui-customizer-panel .panel-header h2 { margin: 0; font-size: 20px; font-weight: 600; } .douyin-ui-customizer-panel .close-btn { background: none; border: none; color: #ffffff; font-size: 28px; cursor: pointer; padding: 0; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; border-radius: 50%; transition: background-color 0.2s; } .douyin-ui-customizer-panel .close-btn:hover { background-color: rgba(255, 255, 255, 0.1); } .douyin-ui-customizer-panel .panel-content { flex: 1; padding: 20px; overflow-y: auto; } .douyin-ui-customizer-panel .settings-tabs { display: flex; gap: 10px; margin-bottom: 20px; border-bottom: 1px solid #e0e0e0; padding-bottom: 10px; } .douyin-ui-customizer-panel .tab-btn { background: #f5f5f5; border: 1px solid #e0e0e0; padding: 8px 16px; border-radius: 6px; cursor: pointer; transition: all 0.2s; font-size: 14px; font-weight: 500; } .douyin-ui-customizer-panel .tab-btn:hover { background: #e8e8e8; } .douyin-ui-customizer-panel .tab-btn.active { background: #000000; color: #ffffff; border-color: #000000; } .douyin-ui-customizer-panel .tab-content { display: none; } .douyin-ui-customizer-panel .tab-content.active { display: block; } .douyin-ui-customizer-panel .setting-group { margin-bottom: 25px; padding: 15px; background: #fafafa; border-radius: 8px; } .douyin-ui-customizer-panel .setting-group h3 { margin-top: 0; margin-bottom: 15px; font-size: 16px; font-weight: 600; color: #333333; } .douyin-ui-customizer-panel label { display: flex; align-items: center; margin-bottom: 10px; cursor: pointer; font-size: 14px; color: #555555; transition: color 0.2s; } .douyin-ui-customizer-panel label:hover { color: #000000; } .douyin-ui-customizer-panel input[type="checkbox"], .douyin-ui-customizer-panel input[type="radio"] { margin-right: 8px; width: 16px; height: 16px; } .douyin-ui-customizer-panel input[type="number"], .douyin-ui-customizer-panel input[type="text"], .douyin-ui-customizer-panel select { margin-left: 8px; padding: 6px 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; } .douyin-ui-customizer-panel input[type="range"] { margin-left: 8px; margin-right: 8px; flex: 1; } .douyin-ui-customizer-panel input[type="color"] { margin-left: 8px; width: 40px; height: 30px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer; } .douyin-ui-customizer-panel .panel-footer { padding: 20px; background: #f8f8f8; border-top: 1px solid #e0e0e0; display: flex; gap: 10px; justify-content: flex-end; } .douyin-ui-customizer-panel .save-btn, .douyin-ui-customizer-panel .reset-btn { padding: 10px 20px; border: none; border-radius: 6px; font-size: 14px; font-weight: 500; cursor: pointer; transition: all 0.2s; } .douyin-ui-customizer-panel .save-btn { background: #000000; color: #ffffff; } .douyin-ui-customizer-panel .save-btn:hover { background: #333333; } .douyin-ui-customizer-panel .reset-btn { background: #ffffff; color: #666666; border: 1px solid #ddd; } .douyin-ui-customizer-panel .reset-btn:hover { background: #f0f0f0; color: #333333; } .douyin-ui-customizer-panel button#exportBtn, .douyin-ui-customizer-panel button#importBtn { padding: 8px 16px; background: #000000; color: #ffffff; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; margin-bottom: 10px; transition: background-color 0.2s; } .douyin-ui-customizer-panel button#exportBtn:hover, .douyin-ui-customizer-panel button#importBtn:hover { background: #333333; } .douyin-ui-customizer-panel input[type="file"] { margin-bottom: 10px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; } .douyin-ui-customizer-panel p { font-size: 13px; color: #777777; margin-top: 5px; line-height: 1.5; } .douyin-ui-customizer-tooltip { position: absolute; background: rgba(0, 0, 0, 0.9); color: #ffffff; padding: 8px 12px; border-radius: 4px; font-size: 12px; pointer-events: none; z-index: 999999; white-space: nowrap; } .douyin-ui-customizer-panel ::-webkit-scrollbar { width: 8px; height: 8px; } .douyin-ui-customizer-panel ::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 4px; } .douyin-ui-customizer-panel ::-webkit-scrollbar-thumb { background: #888; border-radius: 4px; } .douyin-ui-customizer-panel ::-webkit-scrollbar-thumb:hover { background: #555; } @media (max-width: 600px) { .douyin-ui-customizer-panel { width: 95%; max-width: none; margin: 10px; top: 10px; left: 10px; transform: none; max-height: calc(100vh - 20px); } .douyin-ui-customizer-panel .settings-tabs { flex-wrap: wrap; } .douyin-ui-customizer-panel .panel-footer { flex-direction: column; } .douyin-ui-customizer-panel .save-btn, .douyin-ui-customizer-panel .reset-btn { width: 100%; } }`; const darkStyles = ` .douyin-ui-customizer-panel { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 90%; max-width: 800px; max-height: 90vh; background: #1a1a1a; border-radius: 12px; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5); z-index: 999999; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; display: flex; flex-direction: column; overflow: hidden; } .douyin-ui-customizer-panel .panel-header { padding: 20px; background: #2d2d2d; color: #ffffff; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #3d3d3d; } .douyin-ui-customizer-panel .panel-header h2 { margin: 0; font-size: 20px; font-weight: 600; } .douyin-ui-customizer-panel .close-btn { background: none; border: none; color: #ffffff; font-size: 28px; cursor: pointer; padding: 0; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; border-radius: 50%; transition: background-color 0.2s; } .douyin-ui-customizer-panel .close-btn:hover { background-color: rgba(255, 255, 255, 0.1); } .douyin-ui-customizer-panel .panel-content { flex: 1; padding: 20px; overflow-y: auto; } .douyin-ui-customizer-panel .settings-tabs { display: flex; gap: 10px; margin-bottom: 20px; border-bottom: 1px solid #3d3d3d; padding-bottom: 10px; } .douyin-ui-customizer-panel .tab-btn { background: #2d2d2d; border: 1px solid #3d3d3d; padding: 8px 16px; border-radius: 6px; cursor: pointer; transition: all 0.2s; font-size: 14px; font-weight: 500; color: #cccccc; } .douyin-ui-customizer-panel .tab-btn:hover { background: #3d3d3d; color: #ffffff; } .douyin-ui-customizer-panel .tab-btn.active { background: #ffffff; color: #1a1a1a; border-color: #ffffff; } .douyin-ui-customizer-panel .tab-content { display: none; } .douyin-ui-customizer-panel .tab-content.active { display: block; } .douyin-ui-customizer-panel .setting-group { margin-bottom: 25px; padding: 15px; background: #2d2d2d; border-radius: 8px; } .douyin-ui-customizer-panel .setting-group h3 { margin-top: 0; margin-bottom: 15px; font-size: 16px; font-weight: 600; color: #ffffff; } .douyin-ui-customizer-panel label { display: flex; align-items: center; margin-bottom: 10px; cursor: pointer; font-size: 14px; color: #cccccc; transition: color 0.2s; } .douyin-ui-customizer-panel label:hover { color: #ffffff; } .douyin-ui-customizer-panel input[type="checkbox"], .douyin-ui-customizer-panel input[type="radio"] { margin-right: 8px; width: 16px; height: 16px; } .douyin-ui-customizer-panel input[type="number"], .douyin-ui-customizer-panel input[type="text"], .douyin-ui-customizer-panel select { margin-left: 8px; padding: 6px 10px; border: 1px solid #4d4d4d; border-radius: 4px; font-size: 14px; background: #1a1a1a; color: #ffffff; } .douyin-ui-customizer-panel input[type="number"]:focus, .douyin-ui-customizer-panel input[type="text"]:focus, .douyin-ui-customizer-panel select:focus { outline: none; border-color: #ffffff; } .douyin-ui-customizer-panel input[type="range"] { margin-left: 8px; margin-right: 8px; flex: 1; } .douyin-ui-customizer-panel input[type="color"] { margin-left: 8px; width: 40px; height: 30px; border: 1px solid #4d4d4d; border-radius: 4px; cursor: pointer; } .douyin-ui-customizer-panel .panel-footer { padding: 20px; background: #2d2d2d; border-top: 1px solid #3d3d3d; display: flex; gap: 10px; justify-content: flex-end; } .douyin-ui-customizer-panel .save-btn, .douyin-ui-customizer-panel .reset-btn { padding: 10px 20px; border: none; border-radius: 6px; font-size: 14px; font-weight: 500; cursor: pointer; transition: all 0.2s; } .douyin-ui-customizer-panel .save-btn { background: #ffffff; color: #1a1a1a; } .douyin-ui-customizer-panel .save-btn:hover { background: #e0e0e0; } .douyin-ui-customizer-panel .reset-btn { background: #1a1a1a; color: #cccccc; border: 1px solid #4d4d4d; } .douyin-ui-customizer-panel .reset-btn:hover { background: #3d3d3d; color: #ffffff; } .douyin-ui-customizer-panel button#exportBtn, .douyin-ui-customizer-panel button#importBtn { padding: 8px 16px; background: #ffffff; color: #1a1a1a; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; margin-bottom: 10px; transition: background-color 0.2s; } .douyin-ui-customizer-panel button#exportBtn:hover, .douyin-ui-customizer-panel button#importBtn:hover { background: #e0e0e0; } .douyin-ui-customizer-panel input[type="file"] { margin-bottom: 10px; padding: 8px; border: 1px solid #4d4d4d; border-radius: 4px; font-size: 14px; background: #1a1a1a; color: #ffffff; } .douyin-ui-customizer-panel p { font-size: 13px; color: #999999; margin-top: 5px; line-height: 1.5; } .douyin-ui-customizer-tooltip { position: absolute; background: rgba(255, 255, 255, 0.9); color: #1a1a1a; padding: 8px 12px; border-radius: 4px; font-size: 12px; pointer-events: none; z-index: 999999; white-space: nowrap; } .douyin-ui-customizer-panel ::-webkit-scrollbar { width: 8px; height: 8px; } .douyin-ui-customizer-panel ::-webkit-scrollbar-track { background: #3d3d3d; border-radius: 4px; } .douyin-ui-customizer-panel ::-webkit-scrollbar-thumb { background: #666666; border-radius: 4px; } .douyin-ui-customizer-panel ::-webkit-scrollbar-thumb:hover { background: #888888; } @media (max-width: 600px) { .douyin-ui-customizer-panel { width: 95%; max-width: none; margin: 10px; top: 10px; left: 10px; transform: none; max-height: calc(100vh - 20px); } .douyin-ui-customizer-panel .settings-tabs { flex-wrap: wrap; } .douyin-ui-customizer-panel .panel-footer { flex-direction: column; } .douyin-ui-customizer-panel .save-btn, .douyin-ui-customizer-panel .reset-btn { width: 100%; } }`; function $(selector, context = document) { try { return context.querySelector(selector); } catch (error) { console.error(`DOM查询错误 (${selector}):`, error); return null; } } function $$(selector, context = document) { try { return context.querySelectorAll(selector); } catch (error) { console.error(`DOM查询错误 (${selector}):`, error); return new NodeList(); } } function createElement(tagName, attributes = {}, children = []) { const element = document.createElement(tagName); for (const [key, value] of Object.entries(attributes)) { if (key.startsWith('on') && typeof value === 'function') { element.addEventListener(key.slice(2).toLowerCase(), value); } else if (key === 'style' && typeof value === 'object') { Object.assign(element.style, value); } else { element.setAttribute(key, value); } } if (typeof children === 'string') { element.textContent = children; } else if (Array.isArray(children)) { children.forEach(child => { if (child instanceof Node) { element.appendChild(child); } else if (typeof child === 'string') { element.appendChild(document.createTextNode(child)); } }); } return element; } function addClass(element, className) { if (!element || !element.classList) return; if (Array.isArray(className)) { className.forEach(cls => element.classList.add(cls)); } else { element.classList.add(className); } } function removeClass(element, className) { if (!element || !element.classList) return; if (Array.isArray(className)) { className.forEach(cls => element.classList.remove(cls)); } else { element.classList.remove(className); } } function toggleClass(element, className) { if (!element || !element.classList) return false; return element.classList.toggle(className); } function hasClass(element, className) { if (!element || !element.classList) return false; return element.classList.contains(className); } function addEventListener(element, eventName, handler, options = {}) { if (!element || typeof element.addEventListener !== 'function') return; element.addEventListener(eventName, handler, options); } function removeEventListener(element, eventName, handler, options = {}) { if (!element || typeof element.removeEventListener !== 'function') return; element.removeEventListener(eventName, handler, options); } function debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () => { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; } function throttle(func, limit) { let inThrottle; return function(...args) { if (!inThrottle) { func.apply(this, args); inThrottle = true; setTimeout(() => inThrottle = false, limit); } }; } function getComputedStyle(element, property) { if (!element) return ''; const computed = window.getComputedStyle(element); return computed.getPropertyValue(property); } function setStyle(element, property, value) { if (!element) return; try { element.style[property] = value; } catch (error) { console.error(`设置样式错误 (${property}):`, error); } } function setStyles(element, styles) { if (!element) return; try { Object.assign(element.style, styles); } catch (error) { console.error('设置样式错误:', error); } } function isInViewport(element) { if (!element) return false; const rect = element.getBoundingClientRect(); return ( rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth) ); } function getElementPosition(element) { if (!element) return { top: 0, left: 0 }; const rect = element.getBoundingClientRect(); return { top: rect.top + window.pageYOffset, left: rect.left + window.pageXOffset }; } function removeElement(element) { if (!element || !element.parentNode) return; element.parentNode.removeChild(element); } function cloneElement(element, deep = true) { if (!element) return null; try { return element.cloneNode(deep); } catch (error) { console.error('克隆元素错误:', error); return null; } } function insertAfter(newElement, targetElement) { if (!newElement || !targetElement || !targetElement.parentNode) return; targetElement.parentNode.insertBefore(newElement, targetElement.nextSibling); } function insertBefore(newElement, targetElement) { if (!newElement || !targetElement || !targetElement.parentNode) return; targetElement.parentNode.insertBefore(newElement, targetElement); } function getItem(key, defaultValue = null) { try { const item = localStorage.getItem(key); if (item === null) { return defaultValue; } return JSON.parse(item); } catch (error) { console.error(`获取本地存储数据失败 (${key}):`, error); return defaultValue; } } function setItem(key, value) { try { localStorage.setItem(key, JSON.stringify(value)); return true; } catch (error) { console.error(`设置本地存储数据失败 (${key}):`, error); return false; } } function removeItem(key) { try { localStorage.removeItem(key); return true; } catch (error) { console.error(`移除本地存储数据失败 (${key}):`, error); return false; } } function clear() { try { localStorage.clear(); return true; } catch (error) { console.error('清空本地存储数据失败:', error); return false; } } function hasItem(key) { try { return localStorage.getItem(key) !== null; } catch (error) { console.error(`检查存储键失败 (${key}):`, error); return false; } } function getAllKeys() { try { const keys = []; for (let i = 0; i < localStorage.length; i++) { keys.push(localStorage.key(i)); } return keys; } catch (error) { console.error('获取所有存储键失败:', error); return []; } } function getItems(keys) { const result = {}; keys.forEach(key => { result[key] = getItem(key); }); return result; } function setItems(items) { let success = true; Object.entries(items).forEach(([key, value]) => { if (!setItem(key, value)) { success = false; } }); return success; } function removeItems(keys) { let success = true; keys.forEach(key => { if (!removeItem(key)) { success = false; } }); return success; } function getStorageInfo() { try { let totalSize = 0; for (let i = 0; i < localStorage.length; i++) { const key = localStorage.key(i); const value = localStorage.getItem(key); totalSize += key.length + value.length; } return { itemCount: localStorage.length, totalSize: totalSize, totalSizeKB: (totalSize / 1024).toFixed(2), quota: getStorageQuota() }; } catch (error) { console.error('获取存储信息失败:', error); return { itemCount: 0, totalSize: 0, totalSizeKB: '0', quota: null }; } } function getStorageQuota() { try { return 5 * 1024 * 1024; } catch (error) { console.error('获取存储配额失败:', error); return null; } } function isStorageAvailable() { try { const testKey = '__storage_test__'; localStorage.setItem(testKey, testKey); localStorage.removeItem(testKey); return true; } catch (error) { return false; } } function setItemWithExpiry(key, value, ttl) { const item = { value: value, expiry: Date.now() + ttl }; return setItem(key, item); } function getItemWithExpiry(key, defaultValue = null) { const item = getItem(key); if (!item || typeof item !== 'object' || !item.hasOwnProperty('expiry')) { return defaultValue; } if (Date.now() > item.expiry) { removeItem(key); return defaultValue; } return item.value; } function saveConfigWithVersion(appName, config, version) { const configWithVersion = { version: version, config: config, savedAt: new Date().toISOString() }; return setItem(`${appName}_config`, configWithVersion); } function loadConfigWithVersion(appName, defaultConfig, currentVersion) { const saved = getItem(`${appName}_config`); if (saved && saved.version === currentVersion) { return saved.config; } return defaultConfig; } function exportStorageToJson(filename = 'storage-export.json') { try { const data = {}; for (let i = 0; i < localStorage.length; i++) { const key = localStorage.key(i); data[key] = getItem(key); } const jsonStr = JSON.stringify(data, null, 2); const blob = new Blob([jsonStr], { type: 'application/json' }); const url = URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = filename; document.body.appendChild(link); link.click(); document.body.removeChild(link); URL.revokeObjectURL(url); } catch (error) { console.error('导出存储数据失败:', error); } } function importStorageFromJson(file, callback) { const reader = new FileReader(); reader.onload = function(event) { try { const data = JSON.parse(event.target.result); clear(); Object.entries(data).forEach(([key, value]) => { setItem(key, value); }); callback(true); } catch (error) { console.error('导入存储数据失败:', error); callback(false, error); } }; reader.onerror = function() { callback(false, new Error('文件读取失败')); }; reader.readAsText(file); } const DEFAULT_CONFIG = { theme: 'light', videoUI: { showLikeButton: true, showCommentButton: true, showShareButton: true, showAuthorInfo: true, showMusicInfo: true, showDescription: true, showRecommendations: true, layout: 'default', controlBar: { show: true, autoHide: true, position: 'bottom' } }, liveUI: { showGifts: true, showDanmaku: true, showRecommendations: true, showAds: false, showStats: true, danmaku: { fontSize: 16, color: '#FFFFFF', opacity: 0.8, speed: 'medium', position: 'top' }, layout: 'default' }, general: { autoPlay: true, autoScroll: false, keyboardShortcuts: true, notifications: false } }; function loadConfig() { try { const savedConfig = GM_getValue('douyin_ui_customizer_config'); if (savedConfig) { return mergeConfig(savedConfig, DEFAULT_CONFIG); } return DEFAULT_CONFIG; } catch (error) { console.error('加载配置失败：', error); return DEFAULT_CONFIG; } } function saveConfig(config) { try { GM_setValue('douyin_ui_customizer_config', config); console.log('配置已保存'); } catch (error) { console.error('保存配置失败：', error); } } function resetConfig() { try { GM_setValue('douyin_ui_customizer_config', DEFAULT_CONFIG); console.log('配置已重置为默认值'); return DEFAULT_CONFIG; } catch (error) { console.error('重置配置失败：', error); return DEFAULT_CONFIG; } } function mergeConfig(userConfig, defaultConfig) { const merged = { ...defaultConfig }; for (const key in userConfig) { if (userConfig.hasOwnProperty(key)) { if (typeof userConfig[key] === 'object' && userConfig[key] !== null && typeof defaultConfig[key] === 'object' && defaultConfig[key] !== null && !Array.isArray(userConfig[key]) && !Array.isArray(defaultConfig[key])) { merged[key] = mergeConfig(userConfig[key], defaultConfig[key]); } else { merged[key] = userConfig[key]; } } } return merged; } function exportConfig() { const config = loadConfig(); return JSON.stringify(config, null, 2); } function importConfig(jsonString) { try { const config = JSON.parse(jsonString); saveConfig(config); return true; } catch (error) { console.error('导入配置失败：', error); return false; } } function isVideoPage() { return location.pathname.includes('/video/') || location.pathname === '/' || location.pathname.includes('/user/'); } function isLivePage() { return location.pathname.includes('/live/'); } class UIManager { constructor(config) { this.config = config; this.settingsPanel = null; } applyVideoCustomizations() { console.log('应用短视频界面定制'); if (!this.config.videoUI) return; const { videoUI } = this.config; this.toggleElement(() => { const heartIcons = this.findElementsByStructure({ tagName: 'svg', attributes: { viewBox: '0 0 1024 1024' } }); if (heartIcons.length > 0) { return heartIcons.map(icon => icon.closest('div') || icon); } return this.findElementsByClassPattern(/like|heart/i); }, videoUI.showLikeButton); this.toggleElement(() => { const commentElements = this.findElementsByStructure({ tagName: 'div', children: [{ tagName: 'svg', attributes: { viewBox: '0 0 1024 1024' } }] }); if (commentElements.length > 0) { return commentElements; } return this.findElementsByClassPattern(/comment|discuss/i); }, videoUI.showCommentButton); this.toggleElement(() => { const shareElements = this.findElementsByStructure({ tagName: 'div', children: [{ tagName: 'svg', attributes: { viewBox: '0 0 1024 1024' } }] }); if (shareElements.length > 0) { return shareElements.filter(el => { const text = el.textContent.toLowerCase(); return text.includes('share') || text.includes('分享'); }); } return this.findElementsByClassPattern(/share|forward/i); }, videoUI.showShareButton); this.toggleElement(() => { const avatarElements = this.findElementsByStructure({ tagName: 'img', attributes: { class: /avatar|user/i } }); if (avatarElements.length > 0) { return avatarElements.map(img => img.closest('div') || img); } return this.findElementsByClassPattern(/author|user|avatar/i); }, videoUI.showAuthorInfo); this.toggleElement(() => { const musicElements = this.findElementsByStructure({ text: '音乐' }); if (musicElements.length > 0) { return musicElements.map(el => el.closest('div') || el); } return this.findElementsByClassPattern(/music|sound/i); }, videoUI.showMusicInfo); this.toggleElement(() => { const textElements = document.body.querySelectorAll('div'); const descriptions = Array.from(textElements).filter(el => { return el.textContent.length > 20 && el.textContent.length < 200 && !el.querySelector('img') && !el.querySelector('video'); }); if (descriptions.length > 0) { return descriptions; } return this.findElementsByClassPattern(/desc|description|content/i); }, videoUI.showDescription); this.toggleElement(() => { const recommendationContainers = this.findElementsByStructure({ tagName: 'div', children: [{ tagName: 'video' }] }); if (recommendationContainers.length > 0) { return recommendationContainers; } return this.findElementsByClassPattern(/recommend|suggest|related/i); }, videoUI.showRecommendations); if (videoUI.controlBar) { this.customizeControlBar(videoUI.controlBar); } this.applyLayout('video', videoUI.layout); } applyLiveCustomizations() { console.log('应用直播间界面定制'); if (!this.config.liveUI) return; const { liveUI } = this.config; this.toggleElement(() => { const animatedElements = this.findElementsByStructure({ attributes: { class: /animation|effect|gift/i } }); if (animatedElements.length > 0) { return animatedElements; } const giftContainers = document.body.querySelectorAll('div'); const potentialGifts = Array.from(giftContainers).filter(el => { const style = window.getComputedStyle(el); return style.animationName !== 'none' || style.transform !== 'none'; }); return potentialGifts.length > 0 ? potentialGifts : this.findElementsByClassPattern(/gift|present|reward/i); }, liveUI.showGifts); this.toggleElement(() => { const bulletElements = document.body.querySelectorAll('div'); const potentialBullets = Array.from(bulletElements).filter(el => { const style = window.getComputedStyle(el); return style.position === 'absolute' && style.pointerEvents === 'none' && style.zIndex > 0; }); if (potentialBullets.length > 0) { return potentialBullets; } return this.findElementsByClassPattern(/danmu|bullet|comment|danmaku/i); }, liveUI.showDanmaku); this.toggleElement(() => { const recommendationContainers = this.findElementsByStructure({ tagName: 'div', children: [{ tagName: 'img' }] }); if (recommendationContainers.length > 0) { return recommendationContainers; } return this.findElementsByClassPattern(/recommend|suggest|related|live-recommend/i); }, liveUI.showRecommendations); this.toggleElement(() => { const adElements = this.findElementsByStructure({ text: /广告|推广|ad|promotion/i }); if (adElements.length > 0) { return adElements.map(el => el.closest('div') || el); } return this.findElementsByClassPattern(/ad|advertisement|promotion|广告/i); }, liveUI.showAds); this.toggleElement(() => { const numberElements = document.body.querySelectorAll('div'); const potentialStats = Array.from(numberElements).filter(el => { return /\d+/.test(el.textContent); }); if (potentialStats.length > 0) { return potentialStats; } return this.findElementsByClassPattern(/stat|count|number|view/i); }, liveUI.showStats); if (liveUI.danmaku) { this.customizeDanmaku(liveUI.danmaku); } this.applyLayout('live', liveUI.layout); } toggleElement(selectorOrFinder, show) { let elements = []; if (typeof selectorOrFinder === 'function') { try { elements = selectorOrFinder(); } catch (e) { console.error('查找元素函数执行失败:', e); return; } } else { elements = document.querySelectorAll(selectorOrFinder); } if (!Array.isArray(elements)) { elements = Array.from(elements); } elements.forEach(function(element) { if (element && element.style) { if (show) { element.style.display = ''; element.style.visibility = 'visible'; } else { element.style.display = 'none'; element.style.visibility = 'hidden'; } } }); } findElementsByStructure(options) { const result = []; if (options.text) { const allElements = document.body.querySelectorAll('*'); allElements.forEach(el => { if (el.textContent.includes(options.text)) { result.push(el); } }); } if (options.tagName) { const elements = document.body.querySelectorAll(options.tagName); if (options.attributes) { elements.forEach(el => { let match = true; for (const [attr, value] of Object.entries(options.attributes)) { if (!el.hasAttribute(attr) || (value && el.getAttribute(attr) !== value)) { match = false; break; } } if (match) result.push(el); }); } else { result.push(...Array.from(elements)); } } if (options.children) { const candidates = result.length > 0 ? result : document.body.querySelectorAll('*'); const filtered = []; candidates.forEach(parent => { let match = true; for (const childCriteria of options.children) { const selector = childCriteria.tagName; let found = false; parent.querySelectorAll(selector).forEach(child => { let childMatch = true; if (childCriteria.text && !child.textContent.includes(childCriteria.text)) { childMatch = false; } if (childCriteria.attributes) { for (const [attr, value] of Object.entries(childCriteria.attributes)) { if (!child.hasAttribute(attr) || (value && child.getAttribute(attr) !== value)) { childMatch = false; break; } } } if (childMatch) found = true; }); if (!found) { match = false; break; } }); if (match) filtered.push(parent); }); return filtered; } return result; } findElementsByClassPattern(pattern, tagName = '*') { const elements = document.querySelectorAll(tagName); const result = []; elements.forEach(el => { if (el.className && pattern.test(el.className)) { result.push(el); } }); return result; } customizeControlBar(controlBarConfig) { const controlBar = document.querySelector('.video-control-bar'); if (!controlBar) return; if (!controlBarConfig.show) { controlBar.style.display = 'none'; return; } if (controlBarConfig.position) { controlBar.style.position = 'absolute'; switch (controlBarConfig.position) { case 'top': controlBar.style.top = '0'; controlBar.style.bottom = 'auto'; break; case 'bottom': controlBar.style.bottom = '0'; controlBar.style.top = 'auto'; break; default: controlBar.style.bottom = '0'; } } if (controlBarConfig.autoHide) { } } customizeDanmaku(danmakuConfig) { const styleId = 'douyin-danmaku-custom-styles'; let styleElement = document.getElementById(styleId); if (!styleElement) { styleElement = document.createElement('style'); styleElement.id = styleId; document.head.appendChild(styleElement); } let css = ''; if (danmakuConfig.fontSize) { css += `.danmaku { font-size: ${danmakuConfig.fontSize}px !important; }`; } if (danmakuConfig.color) { css += `.danmaku { color: ${danmakuConfig.color} !important; }`; } if (danmakuConfig.opacity) { css += `.danmaku { opacity: ${danmakuConfig.opacity} !important; }`; } if (danmakuConfig.speed) { let duration = 6; switch (danmakuConfig.speed) { case 'fast': duration = 3; break; case 'slow': duration = 10; break; default: duration = 6; } css += `.danmaku { animation-duration: ${duration}s !important; }`; } styleElement.textContent = css; } applyLayout(type, layout) { if (!layout || layout === 'default') return; console.log(`应用${type}布局：${layout}`); } showSettingsPanel() { if (this.settingsPanel) { this.settingsPanel.remove(); } this.settingsPanel = this.createSettingsPanel(); document.body.appendChild(this.settingsPanel); } createSettingsPanel() { const panel = document.createElement('div'); panel.className = 'douyin-ui-customizer-panel'; panel.innerHTML = ` <div class="panel-header"> <h2>抖音UI定制设置</h2> <button class="close-btn">×</button> </div> <div class="panel-content"> <div class="settings-tabs"> <button class="tab-btn active" data-tab="general">通用设置</button> <button class="tab-btn" data-tab="video">短视频设置</button> <button class="tab-btn" data-tab="live">直播间设置</button> <button class="tab-btn" data-tab="import-export">导入导出</button> </div> <div class="tab-content active" id="general-tab"> ${this.createGeneralSettings()} </div> <div class="tab-content" id="video-tab"> ${this.createVideoSettings()} </div> <div class="tab-content" id="live-tab"> ${this.createLiveSettings()} </div> <div class="tab-content" id="import-export-tab"> ${this.createImportExportSettings()} </div> </div> <div class="panel-footer"> <button class="save-btn">保存设置</button> <button class="reset-btn">重置为默认</button> </div> `; this.setupSettingsPanelEvents(panel); return panel; } setupSettingsPanelEvents(panel) { panel.querySelector('.close-btn').addEventListener('click', () => { panel.remove(); }); panel.querySelectorAll('.tab-btn').forEach(btn => { btn.addEventListener('click', () => { const tabId = btn.getAttribute('data-tab'); panel.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active')); panel.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active')); btn.classList.add('active'); panel.querySelector(`#${tabId}-tab`).classList.add('active'); }); }); panel.querySelector('.save-btn').addEventListener('click', () => { this.saveSettings(panel); }); panel.querySelector('.reset-btn').addEventListener('click', () => { if (confirm('确定要重置所有设置吗？')) { this.config = resetConfig(); panel.remove(); location.reload(); } }); this.makePanelDraggable(panel); } makePanelDraggable(panel) { const header = panel.querySelector('.panel-header'); let isDragging = false; let offsetX, offsetY; header.addEventListener('mousedown', (e) => { isDragging = true; const panelRect = panel.getBoundingClientRect(); offsetX = e.clientX - panelRect.left; offsetY = e.clientY - panelRect.top; if (panel.style.position !== 'fixed') { panel.style.position = 'fixed'; } header.style.cursor = 'grabbing'; }); document.addEventListener('mousemove', (e) => { if (!isDragging) return; let newX = e.clientX - offsetX; let newY = e.clientY - offsetY; const panelRect = panel.getBoundingClientRect(); const viewportWidth = window.innerWidth; const viewportHeight = window.innerHeight; newX = Math.max(0, Math.min(newX, viewportWidth - panelRect.width)); newY = Math.max(0, Math.min(newY, viewportHeight - panelRect.height)); panel.style.left = `${newX}px`; panel.style.top = `${newY}px`; panel.style.right = 'auto'; panel.style.bottom = 'auto'; }); document.addEventListener('mouseup', () => { if (isDragging) { isDragging = false; header.style.cursor = 'grab'; } }); header.style.cursor = 'grab'; header.addEventListener('selectstart', (e) => { e.preventDefault(); }); } createGeneralSettings() { return ` <div class="setting-group"> <h3>主题设置</h3> <label> <input type="radio" name="theme" value="light" ${this.config.theme === 'light' ? 'checked' : ''}> 浅色主题 </label> <label> <input type="radio" name="theme" value="dark" ${this.config.theme === 'dark' ? 'checked' : ''}> 深色主题 </label> </div> <div class="setting-group"> <h3>播放设置</h3> <label> <input type="checkbox" id="autoPlay" ${this.config.general?.autoPlay ? 'checked' : ''}> 自动播放视频 </label> <label> <input type="checkbox" id="autoScroll" ${this.config.general?.autoScroll ? 'checked' : ''}> 自动滚动到下一个视频 </label> </div> <div class="setting-group"> <h3>功能设置</h3> <label> <input type="checkbox" id="keyboardShortcuts" ${this.config.general?.keyboardShortcuts ? 'checked' : ''}> 启用键盘快捷键 </label> <label> <input type="checkbox" id="notifications" ${this.config.general?.notifications ? 'checked' : ''}> 启用通知提醒 </label> </div> `; } createVideoSettings() { return ` <div class="setting-group"> <h3>显示元素</h3> <label> <input type="checkbox" id="showLikeButton" ${this.config.videoUI?.showLikeButton ? 'checked' : ''}> 显示点赞按钮 </label> <label> <input type="checkbox" id="showCommentButton" ${this.config.videoUI?.showCommentButton ? 'checked' : ''}> 显示评论按钮 </label> <label> <input type="checkbox" id="showShareButton" ${this.config.videoUI?.showShareButton ? 'checked' : ''}> 显示分享按钮 </label> <label> <input type="checkbox" id="showAuthorInfo" ${this.config.videoUI?.showAuthorInfo ? 'checked' : ''}> 显示作者信息 </label> <label> <input type="checkbox" id="showMusicInfo" ${this.config.videoUI?.showMusicInfo ? 'checked' : ''}> 显示音乐信息 </label> <label> <input type="checkbox" id="showDescription" ${this.config.videoUI?.showDescription ? 'checked' : ''}> 显示视频描述 </label> <label> <input type="checkbox" id="showRecommendations" ${this.config.videoUI?.showRecommendations ? 'checked' : ''}> 显示推荐视频 </label> </div> <div class="setting-group"> <h3>控制栏设置</h3> <label> <input type="checkbox" id="controlBarShow" ${this.config.videoUI?.controlBar?.show ? 'checked' : ''}> 显示控制栏 </label> <label> <input type="checkbox" id="controlBarAutoHide" ${this.config.videoUI?.controlBar?.autoHide ? 'checked' : ''}> 自动隐藏控制栏 </label> <label> <select id="controlBarPosition"> <option value="bottom" ${this.config.videoUI?.controlBar?.position === 'bottom' ? 'selected' : ''}>底部</option> <option value="top" ${this.config.videoUI?.controlBar?.position === 'top' ? 'selected' : ''}>顶部</option> </select> 控制栏位置 </label> </div> `; } createLiveSettings() { return ` <div class="setting-group"> <h3>显示元素</h3> <label> <input type="checkbox" id="showGifts" ${this.config.liveUI?.showGifts ? 'checked' : ''}> 显示礼物动画 </label> <label> <input type="checkbox" id="showDanmaku" ${this.config.liveUI?.showDanmaku ? 'checked' : ''}> 显示弹幕 </label> <label> <input type="checkbox" id="showRecommendations" ${this.config.liveUI?.showRecommendations ? 'checked' : ''}> 显示推荐直播 </label> <label> <input type="checkbox" id="showAds" ${this.config.liveUI?.showAds ? 'checked' : ''}> 显示广告 </label> <label> <input type="checkbox" id="showStats" ${this.config.liveUI?.showStats ? 'checked' : ''}> 显示统计信息 </label> </div> <div class="setting-group"> <h3>弹幕设置</h3> <label> <input type="number" id="danmakuFontSize" min="12" max="36" value="${this.config.liveUI?.danmaku?.fontSize || 16}"> 字体大小（px） </label> <label> <input type="color" id="danmakuColor" value="${this.config.liveUI?.danmaku?.color || '#FFFFFF'}"> 字体颜色 </label> <label> <input type="range" id="danmakuOpacity" min="0.1" max="1" step="0.1" value="${this.config.liveUI?.danmaku?.opacity || 0.8}"> 透明度: <span id="opacityValue">${this.config.liveUI?.danmaku?.opacity || 0.8}</span> </label> <label> <select id="danmakuSpeed"> <option value="slow" ${this.config.liveUI?.danmaku?.speed === 'slow' ? 'selected' : ''}>慢速</option> <option value="medium" ${this.config.liveUI?.danmaku?.speed === 'medium' ? 'selected' : ''}>中速</option> <option value="fast" ${this.config.liveUI?.danmaku?.speed === 'fast' ? 'selected' : ''}>快速</option> </select> 弹幕速度 </label> </div> `; } createImportExportSettings() { return ` <div class="setting-group"> <h3>导出配置</h3> <button id="exportBtn">导出配置</button> <p>点击按钮导出当前配置到JSON文件</p> </div> <div class="setting-group"> <h3>导入配置</h3> <input type="file" id="importFile" accept=".json"> <button id="importBtn">导入配置</button> <p>选择JSON配置文件并点击导入</p> </div> `; } showNotification(message, type = 'success') { const notification = document.createElement('div'); notification.className = `douyin-ui-customizer-notification notification-${type}`; notification.textContent = message; Object.assign(notification.style, { position: 'fixed', top: '20px', right: '20px', padding: '12px 20px', borderRadius: '6px', color: '#fff', fontSize: '14px', fontWeight: '500', boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)', zIndex: '999999', opacity: '0', transform: 'translateX(100%)', transition: 'all 0.3s ease-out', backgroundColor: type === 'success' ? '#52c41a' : type === 'error' ? '#ff4d4f' : '#1890ff', maxWidth: '300px', wordWrap: 'break-word' }); document.body.appendChild(notification); setTimeout(() => { Object.assign(notification.style, { opacity: '1', transform: 'translateX(0)' }); }, 10); setTimeout(() => { Object.assign(notification.style, { opacity: '0', transform: 'translateX(100%)' }); setTimeout(() => { notification.remove(); }, 300); }, 3000); } saveSettings(panel) { try { this.config.theme = panel.querySelector('input[name="theme"]:checked').value; if (!this.config.general) { this.config.general = {}; } this.config.general.autoPlay = panel.querySelector('#autoPlay').checked; this.config.general.autoScroll = panel.querySelector('#autoScroll').checked; this.config.general.keyboardShortcuts = panel.querySelector('#keyboardShortcuts').checked; this.config.general.notifications = panel.querySelector('#notifications').checked; if (!this.config.videoUI) { this.config.videoUI = {}; } this.config.videoUI.showLikeButton = panel.querySelector('#showLikeButton').checked; this.config.videoUI.showCommentButton = panel.querySelector('#showCommentButton').checked; this.config.videoUI.showShareButton = panel.querySelector('#showShareButton').checked; this.config.videoUI.showAuthorInfo = panel.querySelector('#showAuthorInfo').checked; this.config.videoUI.showMusicInfo = panel.querySelector('#showMusicInfo').checked; this.config.videoUI.showDescription = panel.querySelector('#showDescription').checked; this.config.videoUI.showRecommendations = panel.querySelector('#showRecommendations').checked; if (!this.config.videoUI.controlBar) { this.config.videoUI.controlBar = {}; } this.config.videoUI.controlBar.show = panel.querySelector('#controlBarShow').checked; this.config.videoUI.controlBar.autoHide = panel.querySelector('#controlBarAutoHide').checked; this.config.videoUI.controlBar.position = panel.querySelector('#controlBarPosition').value; if (!this.config.liveUI) { this.config.liveUI = {}; } this.config.liveUI.showGifts = panel.querySelector('#showGifts').checked; this.config.liveUI.showDanmaku = panel.querySelector('#showDanmaku').checked; this.config.liveUI.showRecommendations = panel.querySelector('#showRecommendations').checked; this.config.liveUI.showAds = panel.querySelector('#showAds').checked; this.config.liveUI.showStats = panel.querySelector('#showStats').checked; if (!this.config.liveUI.danmaku) { this.config.liveUI.danmaku = {}; } this.config.liveUI.danmaku.fontSize = parseInt(panel.querySelector('#danmakuFontSize').value); this.config.liveUI.danmaku.color = panel.querySelector('#danmakuColor').value; this.config.liveUI.danmaku.opacity = parseFloat(panel.querySelector('#danmakuOpacity').value); this.config.liveUI.danmaku.speed = panel.querySelector('#danmakuSpeed').value; saveConfig(this.config); setTimeout(() => { injectStyles(this.config.theme); if (isVideoPage()) { const customStyle = document.getElementById('douyin-ui-customizer-custom'); if (customStyle) { customStyle.remove(); } this.applyVideoCustomizations(); } if (isLivePage()) { const customStyle = document.getElementById('douyin-ui-customizer-custom'); if (customStyle) { customStyle.remove(); } this.applyLiveCustomizations(); } this.showNotification('设置已成功保存并应用！', 'success'); setTimeout(() => { panel.remove(); }, 300); }, 100); } catch (error) { console.error('保存设置失败:', error); this.showNotification('保存设置失败，请重试', 'error'); } } } const CURRENT_VERSION = '1.0.19'; const UPDATE_CHECK_INTERVAL = 24 * 60 * 60 * 1000; async function checkForUpdates(showNoUpdateMessage = false) { try { const updateUrl = 'https: GM_xmlhttpRequest({ method: 'GET', url: updateUrl, onload: function(response) { if (response.status === 200) { const scriptContent = response.responseText; const versionMatch = scriptContent.match(/@version\s+(\d+\.\d+\.\d+)/i); if (versionMatch && versionMatch[1]) { const latestVersion = versionMatch[1]; if (isNewerVersion(latestVersion, CURRENT_VERSION)) { if (confirm(`发现新版本 ${latestVersion}！是否更新脚本？\n\n当前版本：${CURRENT_VERSION}`)) { window.open(updateUrl, '_blank'); } } else if (showNoUpdateMessage) { alert('您的脚本已是最新版本！'); } } } }, onerror: function() { if (showNoUpdateMessage) { alert('检查更新失败，请稍后重试。'); } } }); } catch (error) { console.error('检查更新时发生错误：', error); } } function isNewerVersion(newVersion, currentVersion) { const newParts = newVersion.split('.').map(Number); const currentParts = currentVersion.split('.').map(Number); for (let i = 0; i < newParts.length; i++) { if (newParts[i] > currentParts[i]) return true; if (newParts[i] < currentParts[i]) return false; } return false; } function shouldCheckForUpdates() { const lastCheckTime = getItem('lastUpdateCheckTime', 0); const now = Date.now(); if (now - lastCheckTime > UPDATE_CHECK_INTERVAL) { setItem('lastUpdateCheckTime', now); return true; } return false; } function init() { console.log('抖音UI定制工具已启动'); const config = loadConfig(); const uiManager = new UIManager(config); injectStyles(config.theme); observePageChanges(uiManager); registerMenuCommands(uiManager); if (shouldCheckForUpdates()) { checkForUpdates(false); } } function injectStyles(theme) { const oldStyle = document.getElementById('douyin-ui-customizer-styles'); if (oldStyle) { oldStyle.remove(); } const styleElement = document.createElement('style'); styleElement.id = 'douyin-ui-customizer-styles'; if (theme === 'dark') { styleElement.textContent = darkStyles; } else { styleElement.textContent = defaultStyles; } document.head.appendChild(styleElement); const customStyle = document.createElement('style'); customStyle.id = 'douyin-ui-customizer-custom'; customStyle.textContent = generateCustomStyles(); document.head.appendChild(customStyle); } function generateCustomStyles() { const config = loadConfig(); let customCSS = ''; if (config.videoUI) { if (!config.videoUI.showLikeButton) { customCSS += '.like-button { display: none !important; }'; } if (!config.videoUI.showCommentButton) { customCSS += '.comment-button { display: none !important; }'; } if (!config.videoUI.showShareButton) { customCSS += '.share-button { display: none !important; }'; } if (!config.videoUI.showAuthorInfo) { customCSS += '.author-info { display: none !important; }'; } if (!config.videoUI.showMusicInfo) { customCSS += '.music-info, .music-label, .sound-info { display: none !important; }'; } if (!config.videoUI.showDescription) { customCSS += '.video-desc, .description, .video-content { display: none !important; }'; } if (config.videoUI.layout) { } } if (config.liveUI) { if (!config.liveUI.showGifts) { customCSS += '.gift-animation, .gift-container { display: none !important; }'; } if (!config.liveUI.showRecommendations) { customCSS += '.live-recommendations, .live-ads { display: none !important; }'; } if (config.liveUI.danmaku) { if (config.liveUI.danmaku.fontSize) { customCSS += `.danmaku { font-size: ${config.liveUI.danmaku.fontSize}px !important; }`; } if (config.liveUI.danmaku.color) { customCSS += `.danmaku { color: ${config.liveUI.danmaku.color} !important; }`; } } } return customCSS; } function observePageChanges(uiManager) { const observer = new MutationObserver((mutations) => { if (isVideoPage()) { uiManager.applyVideoCustomizations(); } if (isLivePage()) { uiManager.applyLiveCustomizations(); } }); observer.observe(document.body, { childList: true, subtree: true }); setTimeout(() => { if (isVideoPage()) { uiManager.applyVideoCustomizations(); } if (isLivePage()) { uiManager.applyLiveCustomizations(); } }, 1000); } function isVideoPage() { return location.pathname.includes('/video/') || location.pathname === '/' || location.pathname.includes('/user/'); } function isLivePage() { return location.pathname.includes('/live/'); } function createFloatingSettingsButton(uiManager) { if (document.getElementById('douyin-ui-customizer-float-btn')) { return; } const floatButton = document.createElement('div'); floatButton.id = 'douyin-ui-customizer-float-btn'; floatButton.innerHTML = '⚙️'; floatButton.style.cssText = ` position: fixed; bottom: 30px; right: 30px; width: 50px; height: 50px; background: #000000; color: #ffffff; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 24px; cursor: pointer; z-index: 999998; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3); transition: all 0.3s ease; `; floatButton.addEventListener('click', () => { uiManager.showSettingsPanel(); }); floatButton.addEventListener('mouseenter', () => { floatButton.style.transform = 'scale(1.1)'; }); floatButton.addEventListener('mouseleave', () => { floatButton.style.transform = 'scale(1)'; }); document.body.appendChild(floatButton); setInterval(() => { if (!document.getElementById('douyin-ui-customizer-float-btn')) { createFloatingSettingsButton(uiManager); } }, 5000); } function registerMenuCommands(uiManager) { createFloatingSettingsButton(uiManager); GM_registerMenuCommand('打开设置面板', () => { uiManager.showSettingsPanel(); }); GM_registerMenuCommand('切换暗黑模式', () => { const config = loadConfig(); config.theme = config.theme === 'dark' ? 'light' : 'dark'; saveConfig(config); injectStyles(config.theme); }); GM_registerMenuCommand('检查更新', () => { checkForUpdates(true); }); GM_registerMenuCommand('重置所有设置', () => { if (confirm('确定要重置所有设置吗？')) { resetConfig(); location.reload(); } }); } if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', init); } else { init(); }